// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id          String        @id @default(uuid())
  name        String
  userId      String
  billboards  Billboard[]   @relation("StoreOnBillboard")
  categories  Category[]    @relation("StoreOnCategory")
  sizes       Size[]        @relation("StoreOnSize")
  colors      Color[]       @relation("StoreOnColor")
  products    Product[]     @relation("StoreOnProduct")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Billboard {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreOnBillboard", fields: [storeId], references: [id])
  categories  Category[]
  label       String
  imageUrl    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])    
}

model Category {
  id            String       @id @default(uuid())
  storeId       String
  store         Store        @relation("StoreOnCategory", fields: [storeId], references: [id])
  billboardId   String
  billboard     Billboard    @relation(fields: [billboardId], references: [id])
  products      Product[]     @relation("CategoryOnProduct")
  name          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id            String       @id @default(uuid())
  storeId       String
  store         Store        @relation("StoreOnSize", fields: [storeId], references: [id])
  products      Product[]
  name          String
  value         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([storeId])
}

model Color {
  id            String       @id @default(uuid())
  storeId       String
  store         Store        @relation("StoreOnColor", fields: [storeId], references: [id])
  products      Product[]
  name          String
  value         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([storeId])
}

model Product {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreOnProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category    @relation("CategoryOnProduct", fields: [categoryId], references: [id])
  sizeId      String
  size        Size        @relation(fields: [sizeId], references: [id])
  colorId     String
  color       Color       @relation(fields: [colorId], references: [id])
  images      Image[]
  name        String
  price       Decimal
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id          String       @id @default(uuid())
  productId   String
  product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([productId])
}